
/**
 * @author syz
 * @date 2020-01-20  09:45
 * @description:
 */
/***
 * 
 * leetcode 115 不同的子序列 
 * 
 * 给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。
 *
 * 一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）
 *
 * 示例 1:
 *
 * 输入: S = "rabbbit", T = "rabbit"
 * 输出: 3
 * 解释:
 *
 * 如下图所示, 有 3 种可以从 S 中得到 "rabbit" 的方案。
 * (上箭头符号 ^ 表示选取的字母)
 *
 * rabbbit
 * ^^^^ ^^
 * rabbbit
 * ^^ ^^^^
 * rabbbit
 * ^^^ ^^^
 * 示例 2:
 *
 * 输入: S = "babgbag", T = "bag"
 * 输出: 5
 * 解释:
 *
 * 如下图所示, 有 5 种可以从 S 中得到 "bag" 的方案。 
 * (上箭头符号 ^ 表示选取的字母)
 *
 * babgbag
 * ^^ ^
 * babgbag
 * ^^    ^
 * babgbag
 * ^    ^^
 * babgbag
 *   ^  ^^
 * babgbag
 * 
 * 
 */
public class Distinct_Subsequences {

  public int numDistinct(String s, String t) {
    if ( t== null || t.length() == 0){
      return 1;
    }
    if(s == null || s.length() == 0) {
      return 0;
    }

    char[] ss = s.toCharArray();
    char[] ts = t.toCharArray();
    int[][] dp = new int[ts.length +1 ][ss.length+1];

    for (int j = 0; j<=ss.length  ; j++) {
      dp[0][j] = 1;
    }
    for (int i = 1; i <= ts.length; i++) {
      dp[i][0] = 0;

    }
    for (int i = 1; i <=ts.length ; i++) {
      for (int j = 1; j <=ss.length ; j++) {
        if (ts[i -1]== ss[j -1]) {
          dp[i][j] = dp[i - 1][j - 1]+dp[i][j - 1];
        }else {
          dp[i][j] = dp[i][j - 1];
        }

      }
    }

    return dp[ts.length][ss.length];

  }

  public static void main(String[] args) {
    Distinct_Subsequences distinct_subsequences = new Distinct_Subsequences();
    String s = "rabbbit";
    String t = "rabbit";
    System.out.println(distinct_subsequences.numDistinct(s,t));
  }

}
