
/**
 * @author syz
 * @date 2020-01-19  11:25
 * @description:
 */

/**
 * leetcode 329 矩阵中的最长递增路径
 *
 *
 * 给定一个整数矩阵，找出最长递增路径的长度。
 *
 * 对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。
 *
 * 示例 1:
 *
 * 输入: nums =
 * [
 *   [9,9,4],
 *   [6,6,8],
 *   [2,1,1]
 * ]
 * 输出: 4
 * 解释: 最长递增路径为 [1, 2, 6, 9]。
 * 示例 2:
 *
 * 输入: nums =
 * [
 *   [3,4,5],
 *   [3,2,6],
 *   [2,2,1]
 * ]
 * 输出: 4
 * 解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。
 *
 * */
public class Longest_Increasing_Path_In_A_Matrix {
  public static final int[][] coordinates = {{-1,0},{1,0},{0,1},{0,-1}};
  public static int[][] visited;
  public int m;
  public int n;

  public int longestIncreasingPath(int[][] matrix) {
    if (matrix.length == 0) {
      return 0;
    }
     m = matrix.length;
     n = matrix[0].length;
    visited = new int[m][n];
    int ans = 0;

    for (int i = 0; i <m ; i++) {
      for (int j = 0; j <n ; j++) {
        ans = Math.max(ans,dfs(matrix,i,j,visited));
      }
    }

    return ans;


  }
  public int dfs(int[][] matrix,int i,int j,int[][] visited) {
    if (visited[i][j] != 0) {
      return visited[i][j];
    }

    for (int[] coordinat : coordinates) {
      int x = i + coordinat[0];
      int y = j + coordinat[1];
      if (x >= 0 && x < m && y >= 0 && y < n && matrix[x][y]>matrix[i][j]) {
        visited[i][j] = Math.max(visited[i][j], dfs(matrix, x, y, visited));
      }
    }
    return ++visited[i][j];

  }

  public static void main(String[] args) {
    int[][] matrix = {
        {9, 9, 4},
        {6, 6, 8},
        {2, 1, 1}
};

    Longest_Increasing_Path_In_A_Matrix l = new Longest_Increasing_Path_In_A_Matrix();
    System.out.println(l.longestIncreasingPath(matrix));

  }

}
