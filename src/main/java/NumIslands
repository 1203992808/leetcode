

/**
 * @author syz
 * @date 2020-01-19  15:08
 * @description:
 */

/**
 * leetcode 200 岛屿数量
 * 
 * 给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。
 *
 * 示例 1:
 *
 * 输入:
 * 11110
 * 11010
 * 11000
 * 00000
 *
 * 输出: 1
 * 示例 2:
 *
 * 输入:
 * 11000
 * 11000
 * 00100
 * 00011
 *
 * 输出: 3
 *
 * */
public class NumIslands {
  public int m;
  public int n;

  public int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0) {
      return  0;
    }
     m = grid.length;
     n = grid[0].length;
    int ans = 0;
    for (int i = 0; i < m ; i++) {
      for (int j = 0; j < n; j++) {
        if (grid[i][j] == '1'){
          ans++;
          dfs(grid,i,j);
        }

      }
    }
    return ans;
  }

  public void dfs(char[][] grid,int i,int j) {

    grid[i][j] = '0';
    if (i - 1 >= 0 && grid[i - 1][j] == '1') {
      dfs(grid,i-1,j);
    }
    if (i + 1 < m && grid[i + 1][j] == '1'){
      dfs(grid,i+1,j);
    }
    if (j - 1 >= 0 && grid[i][j - 1] == '1') {
      dfs(grid,i,j - 1);
    }
    if (j+ 1 < n && grid[i][j + 1] == '1'){
      dfs(grid,i,j+1);

    }

  }

  public static void main(String[] args) {
    char[][] chars = {
        {'1','1','1','1','0'},
        {'1','1','0','1','0'},
        {'1','1','0','0','0'},
        {'0','0','0','0','0'}
    };
    NumIslands n = new NumIslands();
    System.out.println(n.numIslands(chars));
  }

}
