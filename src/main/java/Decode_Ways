
/**
 * @author syz
 * @date 2020-01-13  14:20
 * @description:
 */

/**
 * leetcode 91 解码方法
 *
 * 一条包含字母 A-Z 的消息通过以下方式进行了编码：
 *
 * 'A' -> 1 'B' -> 2 ... 'Z' -> 26 给定一个只包含数字的非空字符串，请计算解码方法的总数。
 *
 * 示例 1:
 *
 * 输入: "12" 输出: 2 解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。 示例 2:
 *
 * 输入: "226" 输出: 3 解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 *
 *
 * 1.可拆分时：f(n) = f(n-1) 2.可组合时：f(n) = f(n-2) 3.既可拆分又可组合时：f(n) = f(n-1) + f(n-2)
 */
public class Decode_Ways {


  public int numDecodings(String s) {

    int[] ways = new int[s.length()];

    if (s.charAt(0) == '0') {
      return 0;
    } else if (s.length() == 1) {
      return 1;
    } else {
      ways[0] = 1;
    }

    if ((s.charAt(0) == '1' && s.charAt(1) >= '1') || (s.charAt(0) == '2' && s.charAt(1) >= '1'
        && s.charAt(1) <= '6')) {
      ways[1] = 2;
    } else if (s.charAt(1) == '0' && (s.charAt(0) == '1' || s.charAt(0) == '2')) {
      ways[1] = 1;
    } else if (s.charAt(1) == '0' && s.charAt(0) > '2') {
      return 0;
    } else {
      ways[1] = 1;
    }

    for (int i = 2; i < s.length(); i++) {
      if (s.charAt(i) == '0') {
        if (s.charAt(i - 1) == '1' || s.charAt(i - 1) == '2') {
          ways[i] = ways[i - 2];
        } else {
          return 0;
        }

      } else if ((s.charAt(i - 1) == '1' && s.charAt(i) >= '1') || (s.charAt(i - 1) == '2'
          && s.charAt(i) >= '1' && s.charAt(i) <= '6')) {
        ways[i] = ways[i - 1] + ways[i - 2];
      } else {
        ways[i] = ways[i - 1];
      }
    }

    return ways[s.length() - 1];

  }

  public static void main(String[] args) {
    Decode_Ways decode_ways = new Decode_Ways();
    System.out.println(decode_ways.numDecodings("8176"));
  }
