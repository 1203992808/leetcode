package pojo.thread;

/**
 * @author syz
 * @date 2020-01-15  10:13
 * @description:
 */

/**
*  leetcode 221 最大正方形
 * 在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。
 *
 * 示例:
 *
 * 输入:
 *
 * 1 0 1 0 0
 * 1 0 1 1 1
 * 1 1 1 1 1
 * 1 0 0 1 0
 *
 * 输出: 4
 *
* **/
public class Maximal_Square {
  public  static int maximalSquare(char[][] matrix) {
    int rows = matrix.length, cols = matrix[0].length > 0? matrix[0].length :0;
    int[][] dp = new int[rows][cols];
    int maxLen = Integer.MIN_VALUE;
    for (int j = 0; j <cols ; j++) {
      dp[0][j]=matrix[0][j] == '0'? 0:1;
      maxLen = Math.max(maxLen,dp[0][j]);

    }
    for (int i = 0; i <rows ; i++) {
      dp[i][0] = matrix[i][0] == '0'? 0:1;
      maxLen = Math.max(maxLen,dp[i][0]);

    }

    for (int i = 1; i < rows; i++) {
      for (int j = 1; j <cols ; j++) {
        if (matrix[i][j] == '1') {
          dp[i][j] = Math.min(dp[i - 1][j -1],Math.min(dp[i - 1][j],dp[i][j - 1]))+1;
          maxLen = Math.max(maxLen,dp[i][j]);

        }

      }

    }
    return maxLen * maxLen;

  }

  public static void main(String[] args) {
    char[][] matrix = {
        {'1' ,'0', '1', '0', '0'},
        {'1' ,'0', '1', '1', '1'},
        {'1' ,'1', '1', '1', '1'},
        {'1' ,'0', '1', '0', '0'}
    };
    System.out.println(Maximal_Square.maximalSquare(matrix));

    char[][] arr = {
        {'1'}
    };
    System.out.println(Maximal_Square.maximalSquare(arr));

  }

}
